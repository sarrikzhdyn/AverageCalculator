using System; 
using System.Collections.Generic; 

namespace PersonClass 
{
    // Класс Person, представляющий человека с его данными
    class Person
    {
        // Приватное поле для хранения имени, доступно только внутри класса
        private string name; // Имя человека

        // Приватное поле для хранения возраста, доступно только внутри класса
        private int age; // Возраст человека

        // Приватное поле для хранения адреса, доступно только внутри класса
        private string address; // Адрес проживания человека

        // Метод для установки имени, проверяет на пустоту
        public void SetName(string newName)
        {
            if (!string.IsNullOrWhiteSpace(newName)) // Проверяем, что имя не пустое или не состоит из пробелов
            {
                name = newName; // Присваиваем новое значение имени
            }
            else
            {
                Console.WriteLine("Ошибка: имя не может быть пустым!"); // Сообщаем об ошибке
            }
        }

        // Метод для получения имени, возвращает текущее значение
        public string GetName()
        {
            return name; // Возвращаем сохранённое имя
        }

        // Метод для установки возраста с проверкой на отрицательные значения
        public void SetAge(int newAge)
        {
            if (newAge >= 0) // Проверяем, что возраст не отрицательный
            {
                age = newAge; // Присваиваем новое значение возраста
            }
            else
            {
                Console.WriteLine("Ошибка: возраст не может быть отрицательным!"); // Сообщаем об ошибке
            }
        }

        // Метод для получения возраста, возвращает текущее значение
        public int GetAge()
        {
            return age; // Возвращаем сохранённый возраст
        }

        // Метод для установки адреса, проверяет на пустоту
        public void SetAddress(string newAddress)
        {
            if (!string.IsNullOrWhiteSpace(newAddress)) // Проверяем, что адрес не пустой или не состоит из пробелов
            {
                address = newAddress; // Присваиваем новое значение адреса
            }
            else
            {
                Console.WriteLine("Ошибка: адрес не может быть пустым!"); // Сообщаем об ошибке
            }
        }

        // Метод для получения адреса, возвращает текущее значение
        public string GetAddress()
        {
            return address; // Возвращаем сохранённый адрес
        }

        // Метод для вывода информации о человеке в консоль
        public void PrintInfo()
        {
            Console.WriteLine($"Имя: {name}, Возраст: {age}, Адрес: {address}"); // Выводим все данные в одной строке
        }
    }

    class Program // Основной класс программы, содержащий точку входа
    {
        static void Main(string[] args) // Точка входа в программу, где начинается выполнение
        {
            // Выводим приветственное сообщение для пользователя
            Console.WriteLine("Программа для управления информацией о людях.");

            // Создаём список для хранения всех объектов Person
            List<Person> people = new List<Person>(); // Инициализируем динамический список

            // Переменная для хранения выбора пользователя
            string choice;

            // Цикл для повторного отображения меню до выбора выхода
            do
            {
                // Показываем меню с доступными действиями
                Console.WriteLine("\nВыберите действие:");
                Console.WriteLine("1 - Добавить нового человека"); // Опция для добавления человека
                Console.WriteLine("2 - Показать всех людей"); // Опция для просмотра списка
                Console.WriteLine("3 - Выйти"); // Опция для завершения программы
                Console.Write("Ваш выбор (1-3): "); // Запрашиваем выбор пользователя
                choice = Console.ReadLine(); // Считываем введённое значение

                // Проверяем выбор пользователя и выполняем соответствующее действие
                if (choice == "1")
                {
                    // Создаём новый объект Person для ввода данных
                    Person person = new Person();

                    // Запрашиваем имя нового человека
                    Console.Write("Введите имя: ");
                    string inputName = Console.ReadLine(); // Считываем имя
                    person.SetName(inputName); // Устанавливаем имя

                    // Запрашиваем возраст нового человека
                    Console.Write("Введите возраст: ");
                    string inputAge = Console.ReadLine(); // Считываем возраст
                    int age;
                    if (int.TryParse(inputAge, out age)) // Проверяем, можно ли преобразовать в число
                    {
                        person.SetAge(age); // Устанавливаем возраст
                    }
                    else
                    {
                        Console.WriteLine("Ошибка: возраст должен быть целым числом!"); // Сообщаем об ошибке
                        continue; // Переходим к следующей итерации цикла, пропуская остальной ввод
                    }

                    // Запрашиваем адрес нового человека
                    Console.Write("Введите адрес: ");
                    string inputAddress = Console.ReadLine(); // Считываем адрес
                    person.SetAddress(inputAddress); // Устанавливаем адрес

                    // Добавляем созданного человека в список
                    people.Add(person); // Добавляем объект в список
                    Console.WriteLine("Человек добавлен!"); // Подтверждаем успешное добавление
                }
                else if (choice == "2")
                {
                    // Показываем информацию о всех добавленных людях
                    if (people.Count == 0) // Проверяем, пуст ли список
                    {
                        Console.WriteLine("Список пуст!"); // Сообщаем, если нет людей
                    }
                    else
                    {
                        Console.WriteLine("\nСписок людей:"); // Заголовок списка
                        for (int i = 0; i < people.Count; i++) // Проходим по всем элементам списка
                        {
                            Console.Write($"{i + 1}. "); // Нумеруем людей, начиная с 1
                            people[i].PrintInfo(); // Выводим информацию о текущем человеке
                        }
                    }
                }
                else if (choice != "3")
                {
                    Console.WriteLine("Неверный выбор! Введите 1, 2 или 3."); // Сообщаем об ошибке при неверном вводе
                }

                // Спрашиваем, хочет ли пользователь продолжить, если не выбрал выход
                if (choice != "3")
                {
                    Console.Write("Продолжить? (да/нет): "); // Запрашиваем продолжение
                    choice = Console.ReadLine().ToLower(); // Считываем ответ и приводим к нижнему регистру
                }

            } while (choice == "да" || choice == "д" || choice == "yes" || choice == "y"); // Продолжаем цикл при положительном ответе

            // Сообщаем о завершении программы
            Console.WriteLine("Программа завершена.");
        }
    }
}